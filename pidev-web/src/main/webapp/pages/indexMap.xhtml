<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:h="http://java.sun.com/jsf/html" 
    xmlns:f="http://java.sun.com/jsf/core">

<h:head>

    <title>NETlammou</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no"></meta>
    <meta charset="utf-8"></meta>
    <link href="/maps/documentation/javascript/examples/default.css" rel="stylesheet"></link>
    
	<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places&amp;sensor=true&amp;key=AIzaSyAN2ycsJ-nqpU7XC7S79SKsz5Jokh1SHgo"></script>

    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #map-canvas, #map_canvas {
            height: 100%;
        }

        @media print {
            html, body {
                height: auto;
            }

            #map_canvas {
                height: 650px;
            }
        }

        #panel {
            position: absolute;
            top: 5px;
            left: 50%;
            margin-left: -180px;
            z-index: 5;
            background-color: #fff;
            padding: 5px;
            border: 1px solid #999;
        }

        input {
            border: 1px solid  rgba(0, 0, 0, 0.5);
        }
        input.notfound {
            border: 2px solid  rgba(255, 0, 0, 0.4);
        }
    </style>

    <script>
    // <![CDATA[
        function initialize() {
        	//  var start = new google.maps.LatLng(#{LocalisationBean.localisation[0].altitude});            
           var markers=[];
            var markerMap=new google.maps.Marker();
            //debut recuperation marker from object json
            var infowindowMap=new google.maps.InfoWindow();
            	    var xhr = new XMLHttpRequest();
            	    console.log('test')
            	    xhr.open('GET', 'http://localhost:18080/pidev-web/rest/localisation', true);
            	    xhr.responseType = 'json';
            	    xhr.onload = function() {
            	      var status = xhr.status;
            	      if (status === 200) {

var data=xhr.response;
function pinSymbol(color) {
    return {
        path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z M -2,-30 a 2,2 0 1,1 4,0 2,2 0 1,1 -4,0',
        fillColor: color,
        fillOpacity: 1,
        strokeColor: '#000',
        strokeWeight: 2,
        scale: 1,
   };
}


for (var i=0;i<data.length;i++){
	//add marker
	//marker red
	var col ="#ff6347"
	if (data[i].type.valueOf()== new String("healthAndFirstAid").valueOf()) {
		var col ="#ff6347";
	}
	//marker yello
	if (data[i].type.valueOf()== new String("sportsAndLeisure").valueOf()) {
		var col ="#ffff00";
	}
	//marker blue
	if (data[i].type.valueOf()== new String("socialLink").valueOf()) {
		var col ="#0080ff";
	}
	//marker green
	if (data[i].type.valueOf()== new String("environmentAndNature").valueOf()) {
		var col ="#04B45F";
	}
	//marker green
	if (data[i].type.valueOf()== new String("legalAdviceAndHumanRights").valueOf()) {
		var col ="#81BEF7";
	}
	//marker green
	if (data[i].type.valueOf()== new String("internationalSolidarity").valueOf()) {
		var col ="#AC58FA";
	}
	//marker green
	if (data[i].type.valueOf()== new String("helpAndProtectionOfAnimals").valueOf()) {
		var col ="#61210B";
	}
	//marker green
	if (data[i].type.valueOf()== new String("tourismAndLogistics").valueOf()) {
		var col ="#72DACA";
	}
	//marker 
	if (data[i].type.valueOf()== new String("collectAndDistribution").valueOf()) {
		var col ="#339933";
	}
	//marker pink
	if (data[i].type.valueOf()== new String("collectAndDistribution").valueOf()) {
		var col ="#ff6699";
	}
	//marker pink
	if (data[i].type.valueOf()== new String("other").valueOf()) {
		var col ="#585858";
	}
	//marker orange
	if (data[i].type.valueOf()== new String("artsAndCulturalActivities").valueOf()) {
		var col ="#ff6600";
	}
	var myLatLng = {lat: Number(data[i].altitude), lng:Number(data[i].longitude)};
	 markerMap = new google.maps.Marker({
		    position: myLatLng,
		    map: map,
		    title: data[i].address.valueOf(),
		    icon: pinSymbol(col)
		  });
	  console.log(data[i].address);
	  var info = data[i].address.valueOf() ;
	  infowindowMap = new google.maps.InfoWindow({
			content: /*document.getElementById('myForm:description').value*/  info
			    });
	  markers.push(markerMap);
	  
	  //add content to info window
	
    //click marker
	 google.maps.event.addListener(markers[i], 'click', function(content) {

		      
		        infowindowMap.open(map, this);
		    
		});
	 

		}

                 	      } else {
            	        callback(status, xhr.response);
            	      }
            	    };
            	    xhr.send();
            	    google.maps.event.addListener(markerMap, 'click', function() {
                        console.log('ss')
                      });            	   
          var mapOptions = {
            center: new google.maps.LatLng(36.8015108,10.1601702),
            zoom: 13,
            mapTypeId: google.maps.MapTypeId.ROADMAP
          };
          var map = new google.maps.Map(document.getElementById('map-canvas'),
            mapOptions);
          
          var input = /** @type {HTMLInputElement} */(document.getElementById('searchTextField'));
          var autocomplete = new google.maps.places.Autocomplete(input);
		
          autocomplete.bindTo('bounds', map);

         var  infowindow = new google.maps.InfoWindow();
        
          var marker = new google.maps.Marker({
            map: map
          });

          
          google.maps.event.addListener(autocomplete, 'place_changed', function() {
            infowindow.close();
            console.log('gggg'+input.value);
            var geocoder = new google.maps.Geocoder();

            geocoder.geocode({'address': input.value}, function(results, status) {
                console.log(status);
                if (status === 'OK') {
                console.log(results[0].geometry.location.lat());
                console.log(results[0].geometry.location.lng());
                } else {
                  alert('Geocode was not successful for the following reason: ' + status);
                }
              });
            
            marker.setVisible(false);
            input.className = '';
            var place = autocomplete.getPlace();
            if (!place.geometry) {
              // Inform the user that the place was not found and return.
              input.className = 'notfound';
              return;
            }

            // If the place has a geometry, then present it on a map.
            if (place.geometry.viewport) {
              map.fitBounds(place.geometry.viewport);
            } else {
               
              map.setCenter(place.geometry.location);
              map.setZoom(17);  // Why 17? Because it looks good.
            }
            marker.setIcon(/** @type {google.maps.Icon} */({
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(35, 35)
            }));
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
              address = [
                (place.address_components[0] && place.address_components[0].short_name || ''),
                (place.address_components[1] && place.address_components[1].short_name || ''),
                (place.address_components[2] && place.address_components[2].short_name || '')
              ].join(' ');
            }

            infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
            infowindow.open(map, marker);
          });

          // Sets a listener on a radio button to change the filter type on Places
          // Autocomplete.
          function setupClickListener(id, types) {
            var radioButton = document.getElementById(id);
            google.maps.event.addDomListener(radioButton, 'click', function() {
              autocomplete.setTypes(types);
            });
          }

          setupClickListener('changetype-all', []);
          setupClickListener('changetype-establishment', ['establishment']);
          setupClickListener('changetype-geocode', ['geocode']);
        }

function search() {
	//  var start = new google.maps.LatLng(#{LocalisationBean.localisation[0].altitude});            
   var i= 'http://localhost:18080/pidev-web/rest/localisation/';
   var j =  i.concat(document.getElementById('myForm:typesearch').value);
   console.log(j);
   var markers=[];
    var markerMap=new google.maps.Marker();
    //debut recuperation marker from object json
    var infowindowMap=new google.maps.InfoWindow();
    	    var xhr = new XMLHttpRequest();
    	    console.log('test')
    	    xhr.open('GET', j, true);
    	    xhr.responseType = 'json';
    	    xhr.onload = function() {
    	      var status = xhr.status;
    	      if (status === 200) {

var data=xhr.response;
function pinSymbol(color) {
return {
path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z M -2,-30 a 2,2 0 1,1 4,0 2,2 0 1,1 -4,0',
fillColor: color,
fillOpacity: 1,
strokeColor: '#000',
strokeWeight: 2,
scale: 1,
};
}


for (var i=0;i<data.length;i++){
//add marker
//marker red
var col ="#ff6347"
if (data[i].type.valueOf()== new String("healthAndFirstAid").valueOf()) {
var col ="#ff6347";
}
//marker yello
if (data[i].type.valueOf()== new String("sportsAndLeisure").valueOf()) {
var col ="#ffff00";
}
//marker blue
if (data[i].type.valueOf()== new String("socialLink").valueOf()) {
var col ="#0080ff";
}
//marker green
if (data[i].type.valueOf()== new String("environmentAndNature").valueOf()) {
var col ="#04B45F";
}
//marker green
if (data[i].type.valueOf()== new String("legalAdviceAndHumanRights").valueOf()) {
var col ="#81BEF7";
}
//marker green
if (data[i].type.valueOf()== new String("internationalSolidarity").valueOf()) {
var col ="#AC58FA";
}
//marker green
if (data[i].type.valueOf()== new String("helpAndProtectionOfAnimals").valueOf()) {
var col ="#61210B";
}
//marker green
if (data[i].type.valueOf()== new String("tourismAndLogistics").valueOf()) {
var col ="#72DACA";
}
//marker 
if (data[i].type.valueOf()== new String("collectAndDistribution").valueOf()) {
var col ="#339933";
}
//marker pink
if (data[i].type.valueOf()== new String("collectAndDistribution").valueOf()) {
var col ="#ff6699";
}
//marker pink
if (data[i].type.valueOf()== new String("other").valueOf()) {
var col ="#585858";
}
//marker orange
if (data[i].type.valueOf()== new String("artsAndCulturalActivities").valueOf()) {
var col ="#ff6600";
}
var myLatLng = {lat: Number(data[i].altitude), lng:Number(data[i].longitude)};
markerMap = new google.maps.Marker({
    position: myLatLng,
    map: map,
    title: data[i].address.valueOf(),
    icon: pinSymbol(col)
  });
console.log(data[i].address);
var info = data[i].address.valueOf() ;
infowindowMap = new google.maps.InfoWindow({
	content: /*document.getElementById('myForm:description').value*/  info
	    });
markers.push(markerMap);

//add content to info window

//click marker
google.maps.event.addListener(markers[i], 'click', function(content) {

      
        infowindowMap.open(map, this);
    
});

}

         	      } else {
    	        callback(status, xhr.response);
    	      }
    	    };
    	    xhr.send();
    	    google.maps.event.addListener(markerMap, 'click', function() {
                console.log('ss')
              });            	   
  var mapOptions = {
    center: new google.maps.LatLng(36.8015108,10.1601702),
    zoom: 13,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  };
  var map = new google.maps.Map(document.getElementById('map-canvas'),
    mapOptions);
  
  var input = /** @type {HTMLInputElement} */(document.getElementById('myForm:searchTextField'));
  var autocomplete = new google.maps.places.Autocomplete(input);

  autocomplete.bindTo('bounds', map);

 var  infowindow = new google.maps.InfoWindow();

  var marker = new google.maps.Marker({
    map: map
  });

  
  google.maps.event.addListener(autocomplete, 'place_changed', function() {
    infowindow.close();
    console.log('gggg'+input.value);
    var geocoder = new google.maps.Geocoder();

    geocoder.geocode({'address': input.value}, function(results, status) {
        console.log(status);
        if (status === 'OK') {
            
        console.log(results[0].geometry.location.lat());
        console.log(results[0].geometry.location.lng());
        } else {
          alert('Geocode was not successful for the following reason: ' + status);
        }
      });
    
    marker.setVisible(false);
    input.className = '';
    var place = autocomplete.getPlace();
    if (!place.geometry) {
      // Inform the user that the place was not found and return.
      input.className = 'notfound';
      return;
    }

    // If the place has a geometry, then present it on a map.
    if (place.geometry.viewport) {
      map.fitBounds(place.geometry.viewport);
    } else {
       
      map.setCenter(place.geometry.location);
      map.setZoom(17);  // Why 17? Because it looks good.
    }
    marker.setIcon(/** @type {google.maps.Icon} */({
      url: place.icon,
      size: new google.maps.Size(71, 71),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(17, 34),
      scaledSize: new google.maps.Size(35, 35)
    }));
    marker.setPosition(place.geometry.location);
    marker.setVisible(true);

    var address = '';
    if (place.address_components) {
      address = [
        (place.address_components[0] && place.address_components[0].short_name || ''),
        (place.address_components[1] && place.address_components[1].short_name || ''),
        (place.address_components[2] && place.address_components[2].short_name || '')
      ].join(' ');
    }

    infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
    infowindow.open(map, marker);
  });

  // Sets a listener on a radio button to change the filter type on Places
  // Autocomplete.
  function setupClickListener(id, types) {
    var radioButton = document.getElementById(id);
    google.maps.event.addDomListener(radioButton, 'click', function() {
      autocomplete.setTypes(types);
    });
  }

  setupClickListener('changetype-all', []);
  setupClickListener('changetype-establishment', ['establishment']);
  setupClickListener('changetype-geocode', ['geocode']);
}

        google.maps.event.addDomListener(window, 'load', initialize);
    // ]]>
    </script>
</h:head>

<h:body>
    <div id="panel" style="margin-left: -260px">
      
      
      <input name="searchTextField" id="searchTextField" type="text" size="50"/> 
      <h:form id="myForm">
        <h:selectOneMenu value="#{localisationBean.t}" id="typesearch">
        <f:selectItem itemLabel=" Select an action type"/>
        <f:selectItems value="#{data.geTypes()}" />
        </h:selectOneMenu>	
 	 </h:form>
 	 <input type="button" id="search" value="serch" onclick="search()"/>
      <input type="radio" name="type" id="changetype-all" checked="checked"></input>
      <label for="changetype-all">All</label>x

      <input type="radio" name="type" id="changetype-establishment"></input>
      <label for="changetype-establishment">Establishments</label>

      <input type="radio" name="type" id="changetype-geocode"></input>
      <label for="changetype-geocode">Geocodes</label>
      
    </div>
  <div id="map-canvas"></div> 


</h:body>
</html>